module std_msgs {
  module msg {
    module dds_ {
      @appendable
      struct MultiArrayDimension_ {
                string<255> label;
                uint32 size;
                uint32 stride;
      };

      @appendable
      struct MultiArrayLayout_ {
                sequence<std_msgs::msg::dds_::MultiArrayDimension_,100> dim;
                uint32 data_offset;
      };

      @nested
      @appendable
      struct Time_ {
                int32 sec;
                uint32 nanosec;
      };

      @appendable
      struct Header_ {
                std_msgs::msg::dds_::Time_ stamp;
                string<255> frame_id;
      };

      @appendable
      struct Bool_ {
                boolean data;
      };

      @appendable
      struct Byte_ {
                octet data;
      };

      @appendable
      struct ByteMultiArray_ {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<octet,100> data;
      };

      @appendable
      struct Char_ {
                char data;
      };

      @appendable
      struct Float32_ {
                float data;
      };

      @appendable
      struct ColorRGBA_ {
                float r;
                float g;
                float b;
                float a;
      };

      @appendable
      struct Duration_ {
                int32 sec;
                uint32 nanosec;
      };

      @appendable
      struct Float32MultiArray_ {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<float,100> data;
      };

      @appendable
      struct Float64_ {
                double data;
      };

      @appendable
      struct Float64MultiArray_ {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<double,100> data;
      };

      @appendable
      struct Int16 {
                int16 data;
      };

      @appendable
      struct Int16MultiArray {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<int16,100> data;
      };

      @appendable
      struct Int32 {
                int32 data;
      };

      @appendable
      struct Int32MultiArray {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<int32,100> data;
      };

      @appendable
      struct Int64 {
                int64 data;
      };

      @appendable
      struct Int64MultiArray {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<int64,100> data;
      };

      @appendable
      struct Int8 {
                octet data;
      };

      @appendable
      struct Int8MultiArray {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<octet,100> data;
      };

      @appendable
      struct String {
                string<255> data;
      };

      @appendable
      struct UInt16_ {
                uint16 data;
      };

      @appendable
      struct UInt16MultiArray_ {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<uint16,100> data;
      };

      @appendable
      struct UInt32_ {
                uint32 data;
      };

      @appendable
      struct UInt32MultiArray_ {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<uint32,100> data;
      };

      @appendable
      struct UInt64_ {
                uint64 data;
      };

      @appendable
      struct UInt64MultiArray_ {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<uint64,100> data;
      };

      @appendable
      struct UInt8_ {
                octet data;
      };

      @appendable
      struct UInt8MultiArray_ {
                std_msgs::msg::dds_::MultiArrayLayout_ layout;
                sequence<octet,100> data;
      };

    };
  };
};
module geometry_msgs {
  module msg {
    module dds_ {
      @appendable
      struct Vector3_ {
                double x;
                double y;
                double z;
      };

      @appendable
      struct Accel_ {
                geometry_msgs::msg::dds_::Vector3_ linear;
                geometry_msgs::msg::dds_::Vector3_ angular;
      };

      @appendable
      struct AccelStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Accel_ accel;
      };

            typedef double geometry_msgs__AccelWithCovariance__double_array_36[36];
      @appendable
      struct AccelWithCovariance_ {
                geometry_msgs::msg::dds_::Accel_ accel;
                geometry_msgs::msg::dds_::geometry_msgs__AccelWithCovariance__double_array_36 covariance;
      };

      @appendable
      struct AccelWithCovarianceStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::AccelWithCovariance_ accel;
      };

      @appendable
      struct Inertia_ {
                double m;
                geometry_msgs::msg::dds_::Vector3_ com;
                double ixx;
                double ixy;
                double ixz;
                double iyy;
                double iyz;
                double izz;
      };

      @appendable
      struct InertiaStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Inertia_ inertia;
      };

      @appendable
      struct Point_ {
                double x;
                double y;
                double z;
      };

      @appendable
      struct Point32_ {
                float x;
                float y;
                float z;
      };

      @appendable
      struct PointStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Point_ point;
      };

      @appendable
      struct Polygon_ {
                sequence<geometry_msgs::msg::dds_::Point32_,100> points;
      };

      @appendable
      struct PolygonStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Polygon_ polygon;
      };

      @appendable
      struct Quaternion_ {
                double x;
                double y;
                double z;
                double w;
      };

      @appendable
      struct Pose_ {
                geometry_msgs::msg::dds_::Point_ position;
                geometry_msgs::msg::dds_::Quaternion_ orientation;
      };

      @appendable
      struct Pose2D_ {
                double x;
                double y;
                double theta;
      };

      @appendable
      struct PoseArray_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<geometry_msgs::msg::dds_::Pose_,100> poses;
      };

      @appendable
      struct PoseStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Pose_ pose;
      };

            typedef double geometry_msgs__PoseWithCovariance__double_array_36[36];
      @appendable
      struct PoseWithCovariance_ {
                geometry_msgs::msg::dds_::Pose_ pose;
                geometry_msgs::msg::dds_::geometry_msgs__PoseWithCovariance__double_array_36 covariance;
      };

      @appendable
      struct PoseWithCovarianceStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::PoseWithCovariance_ pose;
      };

      @appendable
      struct QuaternionStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Quaternion_ quaternion;
      };

      @appendable
      struct Transform_ {
                geometry_msgs::msg::dds_::Vector3_ translation;
                geometry_msgs::msg::dds_::Quaternion_ rotation;
      };

      @appendable
      struct TransformStamped_ {
                std_msgs::msg::dds_::Header_ header;
                string<255> child_frame_id;
                geometry_msgs::msg::dds_::Transform_ transform;
      };

      @appendable
      struct Twist_ {
                geometry_msgs::msg::dds_::Vector3_ linear;
                geometry_msgs::msg::dds_::Vector3_ angular;
      };

      @appendable
      struct TwistStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Twist_ twist;
      };

            typedef double geometry_msgs__TwistWithCovariance__double_array_36[36];
      @appendable
      struct TwistWithCovariance_ {
                geometry_msgs::msg::dds_::Twist_ twist;
                geometry_msgs::msg::dds_::geometry_msgs__TwistWithCovariance__double_array_36 covariance;
      };

      @appendable
      struct TwistWithCovarianceStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::TwistWithCovariance_ twist;
      };

      @appendable
      struct Vector3Stamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Vector3_ vector;
      };

      @appendable
      struct Wrench_ {
                geometry_msgs::msg::dds_::Vector3_ force;
                geometry_msgs::msg::dds_::Vector3_ torque;
      };

      @appendable
      struct WrenchStamped_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Wrench_ wrench;
      };

    };
  };
};
module diagnostic_msgs {
  module msg {
    module dds_ {
      @appendable
      struct KeyValue_ {
                string<255> key;
                string<255> value;
      };

      const octet DiagnosticStatus__OK = 0;
      const octet DiagnosticStatus__WARN = 1;
      const octet DiagnosticStatus__ERROR = 2;
      const octet DiagnosticStatus__STALE = 3;
      @appendable
      struct DiagnosticStatus_ {
                octet level;
                string<255> name;
                string<255> message;
                string<255> hardware_id;
                sequence<diagnostic_msgs::msg::dds_::KeyValue_,100> values;
      };

      @appendable
      struct DiagnosticArray_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<diagnostic_msgs::msg::dds_::DiagnosticStatus_,100> status;
      };

    };
  };
  module srv {
    module dds_ {
      @appendable
      struct AddDiagnostics_Request_ {
                string<255> load_namespace;
      };

      @appendable
      struct AddDiagnostics_Response_ {
                boolean success;
                string<255> message;
      };

      @appendable
      struct SelfTest_Request_ {
                boolean _dummy;
      };

      @appendable
      struct SelfTest_Response_ {
                string<255> id;
                octet passed;
                sequence<diagnostic_msgs::msg::dds_::DiagnosticStatus_,100> status;
      };

    };
  };
};
module trajectory_msgs {
  module msg {
    module dds_ {
      @appendable
      struct JointTrajectoryPoint_ {
                sequence<double,100> positions;
                sequence<double,100> velocities;
                sequence<double,100> accelerations;
                sequence<double,100> effort;
                std_msgs::msg::dds_::Duration_ time_from_start;
      };

      @appendable
      struct JointTrajectory_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<string<255>,100 > joint_names;
                sequence<trajectory_msgs::msg::dds_::JointTrajectoryPoint_,100> points;
      };

      @appendable
      struct MultiDOFJointTrajectoryPoint_ {
                sequence<geometry_msgs::msg::dds_::Transform_,100> transforms;
                sequence<geometry_msgs::msg::dds_::Twist_,100> velocities;
                sequence<geometry_msgs::msg::dds_::Twist_,100> accelerations;
                std_msgs::msg::dds_::Duration_ time_from_start;
      };

      @appendable
      struct MultiDOFJointTrajectory_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<string<255>,100 > joint_names;
                sequence<trajectory_msgs::msg::dds_::MultiDOFJointTrajectoryPoint_,100> points;
      };

    };
  };
};
module gazebo_msgs {
  module msg {
    module dds_ {
      @appendable
      struct ContactState_ {
                string<255> info;
                string<255> collision1_name;
                string<255> collision2_name;
                sequence<geometry_msgs::msg::dds_::Wrench_,100> wrenches;
                geometry_msgs::msg::dds_::Wrench_ total_wrench;
                sequence<geometry_msgs::msg::dds_::Vector3_,100> contact_positions;
                sequence<geometry_msgs::msg::dds_::Vector3_,100> contact_normals;
                sequence<double,100> depths;
      };

      @appendable
      struct ContactsState_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<gazebo_msgs::msg::dds_::ContactState_,100> states;
      };

      @appendable
      struct LinkState_ {
                string<255> link_name;
                geometry_msgs::msg::dds_::Pose_ pose;
                geometry_msgs::msg::dds_::Twist_ twist;
                string<255> reference_frame;
      };

      @appendable
      struct LinkStates_ {
                sequence<string<255>,100 > name;
                sequence<geometry_msgs::msg::dds_::Pose_,100> pose;
                sequence<geometry_msgs::msg::dds_::Twist_,100> twist;
      };

      @appendable
      struct ModelState_ {
                string<255> model_name;
                geometry_msgs::msg::dds_::Pose_ pose;
                geometry_msgs::msg::dds_::Twist_ twist;
                string<255> reference_frame;
      };

      @appendable
      struct ModelStates_ {
                sequence<string<255>,100 > name;
                sequence<geometry_msgs::msg::dds_::Pose_,100> pose;
                sequence<geometry_msgs::msg::dds_::Twist_,100> twist;
      };

      @appendable
      struct ODEPhysics_ {
                boolean auto_disable_bodies;
                uint32 sor_pgs_precon_iters;
                uint32 sor_pgs_iters;
                double psor_pgs_w;
                double sor_pgs_rms_error_tol;
                double contact_surface_layer;
                double contact_max_correcting_vel;
                double cfm;
                double erp;
                uint32 max_contacts;
      };

      @appendable
      struct WorldState_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<string<255>,100 > name;
                sequence<geometry_msgs::msg::dds_::Pose_,100> pose;
                sequence<geometry_msgs::msg::dds_::Twist_,100> twist;
                sequence<geometry_msgs::msg::dds_::Wrench_,100> wrench;
      };

      @appendable
      struct ODEJointProperties_ {
                sequence<double,100> damping;
                sequence<double,100> hiStop;
                sequence<double,100> loStop;
                sequence<double,100> erp;
                sequence<double,100> cfm;
                sequence<double,100> stop_erp;
                sequence<double,100> stop_cfm;
                sequence<double,100> fudge_factor;
                sequence<double,100> fmax;
                sequence<double,100> vel;
      };

    };
  };
  module srv {
    module dds_ {
      @appendable
      struct ApplyBodyWrench_Request_ {
                string<255> body_name;
                string<255> reference_frame;
                geometry_msgs::msg::dds_::Point_ reference_point;
                geometry_msgs::msg::dds_::Wrench_ wrench;
                std_msgs::msg::dds_::Time_ start_time;
                std_msgs::msg::dds_::Duration_ duration;
      };

      @appendable
      struct ApplyJointEffort_Request_ {
                string<255> joint_name;
                double effort;
                std_msgs::msg::dds_::Time_ start_time;
                std_msgs::msg::dds_::Duration_ duration;
      };

      @appendable
      struct BodyRequest_ {
                string<255> body_name;
      };

      @appendable
      struct Default_Response_ {
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct DeleteLight_Request_ {
                string<255> light_name;
      };

      @appendable
      struct DeleteModel_Request_ {
                string<255> model_name;
      };

      @appendable
      struct GetJointProperties_Request_ {
                string<255> joint_name;
      };

      @appendable
      enum Type {
        REVOLUTE,
        CONTINUOUS,
        PRISMATIC,
        FIXED,
        BALL,
        UNIVERSAL
      };
      @appendable
      struct GetJointProperties_Response_ {
                sequence<double,100> damping;
                sequence<double,100> position;
                sequence<double,100> rate;
                boolean success;
                gazebo_msgs::srv::dds_::Type type;
                string<255> status_message;
      };

      @appendable
      struct GetLightProperties_Request_ {
                string<255> light_name;
      };

      @appendable
      struct GetLightProperties_Response_ {
                std_msgs::msg::dds_::ColorRGBA_ diffuse;
                double attenuation_constant;
                double attenuation_linear;
                double attenuation_quadratic;
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct GetLinkProperties_Request_ {
                string<255> link_name;
      };

      @appendable
      struct GetLinkProperties_Response_ {
                geometry_msgs::msg::dds_::Pose_ com;
                boolean gravity_mode;
                double mass;
                double ixx;
                double ixy;
                double ixz;
                double iyy;
                double iyz;
                double izz;
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct GetLinkState_Request_ {
                string<255> link_name;
                string<255> reference_frame;
      };

      @appendable
      struct GetLinkState_Response_ {
                gazebo_msgs::msg::dds_::LinkState_ link_state;
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct GetModelProperties_Request_ {
                string<255> model_name;
      };

      @appendable
      struct GetModelProperties_Response_ {
                string<255> parent_model_name;
                string<255> canonical_body_name;
                sequence<string<255>,100 > body_names;
                sequence<string<255>,100 > geom_names;
                sequence<string<255>,100 > joint_names;
                sequence<string<255>,100 > child_model_names;
                boolean is_static;
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct GetModelState_Request_ {
                string<255> model_name;
                string<255> relative_entity_name;
      };

      @appendable
      struct GetModelState_Response_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Pose_ pose;
                geometry_msgs::msg::dds_::Twist_ twist;
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct GetPhysicsProperties_Response_ {
                double time_step;
                boolean pause;
                double max_update_rate;
                geometry_msgs::msg::dds_::Vector3_ gravity;
                gazebo_msgs::msg::dds_::ODEPhysics_ ode_config;
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct GetWorldProperties_Response_ {
                double sim_time;
                sequence<string<255>,100 > model_names;
                boolean rendering_enabled;
                boolean success;
                string<255> status_message;
      };

      @appendable
      struct JointRequest_ {
                string<255> joint_name;
      };

      @appendable
      struct SetJointTrajectory_Request_ {
                string<255> model_name;
                trajectory_msgs::msg::dds_::JointTrajectory_ joint_trajectory;
                geometry_msgs::msg::dds_::Pose_ model_pose;
                boolean set_model_pose;
                boolean disable_physics_updates;
      };

      @appendable
      struct SetJointProperties_Request_ {
                string<255> joint_name;
                gazebo_msgs::msg::dds_::ODEJointProperties_ ode_joint_config;
      };

      @appendable
      struct SetLightProperties_Request_ {
                string<255> light_name;
                std_msgs::msg::dds_::ColorRGBA_ diffuse;
                double attenuation_constant;
                double attenuation_linear;
                double attenuation_quadratic;
      };

      @appendable
      struct SetLinkProperties_Request_ {
                string<255> link_name;
                geometry_msgs::msg::dds_::Pose_ com;
                boolean gravity_mode;
                double mass;
                double ixx;
                double ixy;
                double ixz;
                double iyy;
                double iyz;
                double izz;
      };

      @appendable
      struct SetLinkState_Request_ {
                gazebo_msgs::msg::dds_::LinkState_ link_state;
      };

      @appendable
      struct SetModelConfiguration_Request_ {
                string<255> model_name;
                string<255> urdf_param_name;
                sequence<string<255>,100 > joint_names;
                sequence<double,100> joint_positions;
      };

      @appendable
      struct SetModelState_Request_ {
                gazebo_msgs::msg::dds_::ModelState_ model_state;
      };

      @appendable
      struct SetPhysicsProperties_Request_ {
                double time_step;
                double max_update_rate;
                geometry_msgs::msg::dds_::Vector3_ gravity;
                gazebo_msgs::msg::dds_::ODEPhysics_ ode_config;
      };

      @appendable
      struct SpawnModel_Request_ {
                string<255> model_name;
                string<255> model_xml;
                string<255> robot_namespace;
                geometry_msgs::msg::dds_::Pose_ initial_pose;
                string<255> reference_frame;
      };

    };
  };
};
module sensor_msgs {
  module msg {
    module dds_ {
      const octet BatteryState__POWER_SUPPLY_STATUS_UNKNOWN = 0;
      const octet BatteryState__POWER_SUPPLY_STATUS_CHARGING = 1;
      const octet BatteryState__POWER_SUPPLY_STATUS_DISCHARGING = 2;
      const octet BatteryState__POWER_SUPPLY_STATUS_NOT_CHARGING = 3;
      const octet BatteryState__POWER_SUPPLY_STATUS_FULL = 4;
      const octet BatteryState__POWER_SUPPLY_HEALTH_UNKNOWN = 0;
      const octet BatteryState__POWER_SUPPLY_HEALTH_GOOD = 1;
      const octet BatteryState__POWER_SUPPLY_HEALTH_OVERHEAT = 2;
      const octet BatteryState__POWER_SUPPLY_HEALTH_DEAD = 3;
      const octet BatteryState__POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4;
      const octet BatteryState__POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5;
      const octet BatteryState__POWER_SUPPLY_HEALTH_COLD = 6;
      const octet BatteryState__POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7;
      const octet BatteryState__POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8;
      const octet BatteryState__POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0;
      const octet BatteryState__POWER_SUPPLY_TECHNOLOGY_NIMH = 1;
      const octet BatteryState__POWER_SUPPLY_TECHNOLOGY_LION = 2;
      const octet BatteryState__POWER_SUPPLY_TECHNOLOGY_LIPO = 3;
      const octet BatteryState__POWER_SUPPLY_TECHNOLOGY_LIFE = 4;
      const octet BatteryState__POWER_SUPPLY_TECHNOLOGY_NICD = 5;
      const octet BatteryState__POWER_SUPPLY_TECHNOLOGY_LIMN = 6;
      @appendable
      struct BatteryState_ {
                std_msgs::msg::dds_::Header_ header;
                float voltage;
                float current;
                float charge;
                float capacity;
                float design_capacity;
                float percentage;
                octet power_supply_status;
                octet power_supply_health;
                octet power_supply_technology;
                boolean present;
                sequence<float,100> cell_voltage;
                string<255> location;
                string<255> serial_number;
      };

      @appendable
      struct RegionOfInterest_ {
                uint32 x_offset;
                uint32 y_offset;
                uint32 height;
                uint32 width;
                boolean do_rectify;
      };

            typedef double sensor_msgs__CameraInfo__double_array_9[9];
            typedef double sensor_msgs__CameraInfo__double_array_12[12];
      @appendable
      struct CameraInfo_ {
                std_msgs::msg::dds_::Header_ header;
                uint32 height;
                uint32 width;
                string<255> distortion_model;
                sequence<double,100> d;
                sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9 k;
                sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_9 r;
                sensor_msgs::msg::dds_::sensor_msgs__CameraInfo__double_array_12 p;
                uint32 binning_x;
                uint32 binning_y;
                sensor_msgs::msg::dds_::RegionOfInterest_ roi;
      };

      @appendable
      struct ChannelFloat32_ {
                string<255> name;
                sequence<float,100> values;
      };

      @appendable
      struct CompressedImage_ {
                std_msgs::msg::dds_::Header_ header;
                string<255> format;
                sequence<octet,100> data;
      };

      @appendable
      struct FluidPressure_ {
                std_msgs::msg::dds_::Header_ header;
                double fluid_pressure;
                double variance;
      };

      @appendable
      struct Illuminance_ {
                std_msgs::msg::dds_::Header_ header;
                double illuminance;
                double variance;
      };

      @appendable
      struct Image_ {
                std_msgs::msg::dds_::Header_ header;
                uint32 height;
                uint32 width;
                string<255> encoding;
                octet is_bigendian;
                uint32 step;
                sequence<octet,100> data;
      };

            typedef double sensor_msgs__Imu__double_array_9[9];
      @appendable
      struct Imu_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Quaternion_ orientation;
                sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 orientation_covariance;
                geometry_msgs::msg::dds_::Vector3_ angular_velocity;
                sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 angular_velocity_covariance;
                geometry_msgs::msg::dds_::Vector3_ linear_acceleration;
                sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 linear_acceleration_covariance;
      };

      @appendable
      struct JointState_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<string<255>,100 > name;
                sequence<double,100> position;
                sequence<double,100> velocity;
                sequence<double,100> effort;
      };

      @appendable
      struct Joy_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<float,100> axes;
                sequence<int32,100> buttons;
      };

      const octet JoyFeedback__TYPE_LED = 0;
      const octet JoyFeedback__TYPE_RUMBLE = 1;
      const octet JoyFeedback__TYPE_BUZZER = 2;
      @appendable
      struct JoyFeedback_ {
                octet type;
                octet id;
                float intensity;
      };

      @appendable
      struct JoyFeedbackArray_ {
                sequence<sensor_msgs::msg::dds_::JoyFeedback_,100> array;
      };

      @appendable
      struct LaserEcho_ {
                sequence<float,100> echoes;
      };

      @appendable
      struct LaserScan_ {
                std_msgs::msg::dds_::Header_ header;
                float angle_min;
                float angle_max;
                float angle_increment;
                float time_increment;
                float scan_time;
                float range_min;
                float range_max;
                sequence<float,100> ranges;
                sequence<float,100> intensities;
      };

            typedef double sensor_msgs__MagneticField__double_array_9[9];
      @appendable
      struct MagneticField_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Vector3_ magnetic_field;
                sensor_msgs::msg::dds_::sensor_msgs__MagneticField__double_array_9 magnetic_field_covariance;
      };

      @appendable
      struct MultiDOFJointState_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<string<255>,100 > joint_names;
                sequence<geometry_msgs::msg::dds_::Transform_,100> transforms;
                sequence<geometry_msgs::msg::dds_::Twist_,100> twist;
                sequence<geometry_msgs::msg::dds_::Wrench_,100> wrench;
      };

      @appendable
      struct MultiEchoLaserScan_ {
                std_msgs::msg::dds_::Header_ header;
                float angle_min;
                float angle_max;
                float angle_increment;
                float time_increment;
                float scan_time;
                float range_min;
                float range_max;
                sequence<sensor_msgs::msg::dds_::LaserEcho_,100> ranges;
                sequence<sensor_msgs::msg::dds_::LaserEcho_,100> intensities;
      };

      const octet NavSatStatus__STATUS_NO_FIX = 255;
      const octet NavSatStatus__STATUS_FIX = 0;
      const octet NavSatStatus__STATUS_SBAS_FIX = 1;
      const octet NavSatStatus__STATUS_GBAS_FIX = 2;
      const uint16 NavSatStatus__SERVICE_GPS = 1;
      const uint16 NavSatStatus__SERVICE_GLONASS = 2;
      const uint16 NavSatStatus__SERVICE_COMPASS = 4;
      const uint16 NavSatStatus__SERVICE_GALILEO = 8;
      @appendable
      struct NavSatStatus_ {
                octet status;
                uint16 service;
      };

      const octet NavSatFix__COVARIANCE_TYPE_UNKNOWN = 0;
      const octet NavSatFix__COVARIANCE_TYPE_APPROXIMATED = 1;
      const octet NavSatFix__COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
      const octet NavSatFix__COVARIANCE_TYPE_KNOWN = 3;
            typedef double sensor_msgs__NavSatFix__double_array_9[9];
      @appendable
      struct NavSatFix_ {
                std_msgs::msg::dds_::Header_ header;
                sensor_msgs::msg::dds_::NavSatStatus_ status;
                double latitude;
                double longitude;
                double altitude;
                sensor_msgs::msg::dds_::sensor_msgs__NavSatFix__double_array_9 position_covariance;
                octet position_covariance_type;
      };

      const octet PointField__INT8 = 1;
      const octet PointField__UINT8 = 2;
      const octet PointField__INT16 = 3;
      const octet PointField__UINT16 = 4;
      const octet PointField__INT32 = 5;
      const octet PointField__UINT32 = 6;
      const octet PointField__FLOAT32 = 7;
      const octet PointField__FLOAT64 = 8;
      @appendable
      struct PointField_ {
                string<255> name;
                uint32 offset;
                octet datatype;
                uint32 count;
      };

      @appendable
      struct PointCloud_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<geometry_msgs::msg::dds_::Point32_,100> points;
                sequence<sensor_msgs::msg::dds_::ChannelFloat32_,100> channels;
      };

      @appendable
      struct PointCloud2_ {
                std_msgs::msg::dds_::Header_ header;
                uint32 height;
                uint32 width;
                sequence<sensor_msgs::msg::dds_::PointField_,100> fields;
                boolean is_bigendian;
                uint32 point_step;
                uint32 row_step;
                sequence<octet,8000> data;
                boolean is_dense;
      };

      const octet Range__ULTRASOUND = 0;
      const octet Range__INFRARED = 1;
      @appendable
      struct Range_ {
                std_msgs::msg::dds_::Header_ header;
                octet radiation_type;
                float field_of_view;
                float min_range;
                float max_range;
                float range;
      };

      @appendable
      struct RelativeHumidity_ {
                std_msgs::msg::dds_::Header_ header;
                double relative_humidity;
                double variance;
      };

      @appendable
      struct Temperature_ {
                std_msgs::msg::dds_::Header_ header;
                double temperature;
                double variance;
      };

      @appendable
      struct TimeReference_ {
                std_msgs::msg::dds_::Header_ header;
                std_msgs::msg::dds_::Time_ time_ref;
                string<255> source;
      };

    };
  };
  module srv {
    module dds_ {
      @appendable
      struct SetCameraInfo_Request_ {
                sensor_msgs::msg::dds_::CameraInfo_ camera_info;
      };

      @appendable
      struct SetCameraInfo_Response_ {
                boolean success;
                string<255> status_message;
      };

    };
  };
};
module test_msgs {
  module msg {
    module dds_ {
      @appendable
      struct Primitives_ {
                boolean bool_value;
                octet byte_value;
                char char_value;
                float float32_value;
                double float64_value;
                octet int8_value;
                octet uint8_value;
                int16 int16_value;
                uint16 uint16_value;
                int32 int32_value;
                uint32 uint32_value;
                int64 int64_value;
                uint64 uint64_value;
                string<255> string_value;
      };

      @appendable
      struct BoundedArrayNested_ {
                sequence<test_msgs::msg::dds_::Primitives_,4> primitive_values;
      };

      @appendable
      struct BoundedArrayPrimitives_ {
                sequence<boolean,3> bool_values;
                sequence<octet,3> byte_values;
                sequence<char,3> char_values;
                sequence<float,3> float32_values;
                sequence<double,3> float64_values;
                sequence<octet,3> int8_values;
                sequence<octet,3> uint8_values;
                sequence<int16,3> int16_values;
                sequence<uint16,3> uint16_values;
                sequence<int32,3> int32_values;
                sequence<uint32,3> uint32_values;
                sequence<int64,3> int64_values;
                sequence<uint64,3> uint64_values;
                sequence<string<255>,3 > string_values;
                int32 check;
      };

      @appendable
      struct Builtins_ {
                std_msgs::msg::dds_::Duration_ duration_value;
                std_msgs::msg::dds_::Time_ time_value;
      };

      @appendable
      struct DynamicArrayNested_ {
                sequence<test_msgs::msg::dds_::Primitives_,100> primitive_values;
      };

      @appendable
      struct DynamicArrayPrimitives_ {
                sequence<boolean,100> bool_values;
                sequence<octet,100> byte_values;
                sequence<char,100> char_values;
                sequence<float,100> float32_values;
                sequence<double,100> float64_values;
                sequence<octet,100> int8_values;
                sequence<octet,100> uint8_values;
                sequence<int16,100> int16_values;
                sequence<uint16,100> uint16_values;
                sequence<int32,100> int32_values;
                sequence<uint32,100> uint32_values;
                sequence<int64,100> int64_values;
                sequence<uint64,100> uint64_values;
                sequence<string<255>,100 > string_values;
                int32 check;
      };

      @appendable
      struct DynamicArrayPrimitivesNested_ {
                sequence<test_msgs::msg::dds_::DynamicArrayPrimitives_,100> dynamic_array_primitive_values;
      };

      @appendable
      struct Empty_ {
                boolean dummy;
      };

      @appendable
      struct Empty_Request_ {
                boolean _dummy;
      };

      @appendable
      struct Empty_Response_ {
                boolean _dummy;
      };

      @appendable
      struct Nested_ {
                test_msgs::msg::dds_::Primitives_ primitive_values;
      };

            typedef boolean test_msgs__StaticArrayPrimitives__boolean_array_3[3];
            typedef octet test_msgs__StaticArrayPrimitives__octet_array_3[3];
            typedef char test_msgs__StaticArrayPrimitives__char_array_3[3];
            typedef float test_msgs__StaticArrayPrimitives__float_array_3[3];
            typedef double test_msgs__StaticArrayPrimitives__double_array_3[3];
            typedef int16 test_msgs__StaticArrayPrimitives__short_array_3[3];
            typedef uint16 test_msgs__StaticArrayPrimitives__unsigned_short_array_3[3];
            typedef int32 test_msgs__StaticArrayPrimitives__long_array_3[3];
            typedef uint32 test_msgs__StaticArrayPrimitives__unsigned_long_array_3[3];
            typedef int64 test_msgs__StaticArrayPrimitives__long_long_array_3[3];
            typedef uint64 test_msgs__StaticArrayPrimitives__unsigned_long_long_array_3[3];
            typedef string<255> test_msgs__StaticArrayPrimitives__string_array_3[3];
      @appendable
      struct StaticArrayPrimitives_ {
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__boolean_array_3 bool_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__octet_array_3 byte_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__char_array_3 char_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__float_array_3 float32_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__double_array_3 float64_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__octet_array_3 int8_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__octet_array_3 uint8_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__short_array_3 int16_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__unsigned_short_array_3 uint16_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__long_array_3 int32_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__unsigned_long_array_3 uint32_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__long_long_array_3 int64_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__unsigned_long_long_array_3 uint64_values;
                test_msgs::msg::dds_::test_msgs__StaticArrayPrimitives__string_array_3 string_values;
      };

            typedef test_msgs::msg::dds_::Primitives_ test_msgs__StaticArrayNested__test_msgs__msg__dds___Primitives__array_4[4];
      @appendable
      struct StaticArrayNested_ {
                test_msgs::msg::dds_::test_msgs__StaticArrayNested__test_msgs__msg__dds___Primitives__array_4 primitive_values;
      };

    };
  };
  module srv {
    module dds_ {
      @appendable
      struct Primitives_Request_ {
                boolean bool_value;
                octet byte_value;
                char char_value;
                float float32_value;
                double float64_value;
                octet int8_value;
                octet uint8_value;
                int16 int16_value;
                uint16 uint16_value;
                int32 int32_value;
                uint32 uint32_value;
                int64 int64_value;
                uint64 uint64_value;
                string<255> string_value;
      };

      @appendable
      struct Primitives_Response_ {
                boolean bool_value;
                octet byte_value;
                char char_value;
                float float32_value;
                double float64_value;
                octet int8_value;
                octet uint8_value;
                int16 int16_value;
                uint16 uint16_value;
                int32 int32_value;
                uint32 uint32_value;
                int64 int64_value;
                uint64 uint64_value;
                string<255> string_value;
      };

    };
  };
};
module lifecycle_msgs {
  module msg {
    module dds_ {
      const octet State__PRIMARY_STATE_UNKNOWN = 0;
      const octet State__PRIMARY_STATE_UNCONFIGURED = 1;
      const octet State__PRIMARY_STATE_INACTIVE = 2;
      const octet State__PRIMARY_STATE_ACTIVE = 3;
      const octet State__PRIMARY_STATE_FINALIZED = 4;
      const octet State__TRANSITION_STATE_CONFIGURING = 10;
      const octet State__TRANSITION_STATE_CLEANINGUP = 11;
      const octet State__TRANSITION_STATE_SHUTTINGDOWN = 12;
      const octet State__TRANSITION_STATE_ACTIVATING = 13;
      const octet State__TRANSITION_STATE_DEACTIVATING = 14;
      const octet State__TRANSITION_STATE_ERRORPROCESSING = 15;
      @appendable
      struct State_ {
                octet id;
                string<255> label;
      };

      const octet Transition__TRANSITION_CREATE = 0;
      const octet Transition__TRANSITION_CONFIGURE = 1;
      const octet Transition__TRANSITION_CLEANUP = 2;
      const octet Transition__TRANSITION_ACTIVATE = 3;
      const octet Transition__TRANSITION_DEACTIVATE = 4;
      const octet Transition__TRANSITION_SHUTDOWN = 5;
      const octet Transition__TRANSITION_DESTROY = 6;
      const octet Transition__TRANSITION_ON_CONFIGURE_SUCCESS = 10;
      const octet Transition__TRANSITION_ON_CONFIGURE_FAILURE = 11;
      const octet Transition__TRANSITION_ON_CONFIGURE_ERROR = 12;
      const octet Transition__TRANSITION_ON_CLEANUP_SUCCESS = 20;
      const octet Transition__TRANSITION_ON_CLEANUP_FAILURE = 21;
      const octet Transition__TRANSITION_ON_CLEANUP_ERROR = 22;
      const octet Transition__TRANSITION_ON_ACTIVATE_SUCCESS = 30;
      const octet Transition__TRANSITION_ON_ACTIVATE_FAILURE = 31;
      const octet Transition__TRANSITION_ON_ACTIVATE_ERROR = 32;
      const octet Transition__TRANSITION_ON_DEACTIVATE_SUCCESS = 40;
      const octet Transition__TRANSITION_ON_DEACTIVATE_FAILURE = 41;
      const octet Transition__TRANSITION_ON_DEACTIVATE_ERROR = 42;
      const octet Transition__TRANSITION_UNCONFIGURED_SHUTDOWN = 50;
      const octet Transition__TRANSITION_INACTIVE_SHUTDOWN = 51;
      const octet Transition__TRANSITION_ACTIVE_SHUTDOWN = 52;
      const octet Transition__TRANSITION_ON_SHUTDOWN_SUCCESS = 53;
      const octet Transition__TRANSITION_ON_SHUTDOWN_FAILURE = 54;
      const octet Transition__TRANSITION_ON_SHUTDOWN_ERROR = 55;
      const octet Transition__TRANSITION_ON_ERROR_SUCCESS = 60;
      const octet Transition__TRANSITION_ON_ERROR_FAILURE = 61;
      const octet Transition__TRANSITION_ON_ERROR_ERROR = 62;
      const octet Transition__TRANSITION_CALLBACK_SUCCESS = 97;
      const octet Transition__TRANSITION_CALLBACK_FAILURE = 98;
      const octet Transition__TRANSITION_CALLBACK_ERROR = 99;
      @appendable
      struct Transition_ {
                octet id;
                string<255> label;
      };

      @appendable
      struct TransitionDescription_ {
                lifecycle_msgs::msg::dds_::Transition_ transition;
                lifecycle_msgs::msg::dds_::State_ start_state;
                lifecycle_msgs::msg::dds_::State_ goal_state;
      };

      @appendable
      struct TransitionEvent_ {
                uint64 timestamp;
                lifecycle_msgs::msg::dds_::Transition_ transition;
                lifecycle_msgs::msg::dds_::State_ start_state;
                lifecycle_msgs::msg::dds_::State_ goal_state;
      };

    };
  };
  module srv {
    module dds_ {
      @appendable
      struct ChangeState_Request_ {
                string<255> node_name;
                lifecycle_msgs::msg::dds_::Transition_ transition;
      };

      @appendable
      struct ChangeState_Response_ {
                boolean success;
      };

      @appendable
      struct GetAvailableStates_Request_ {
                string<255> node_name;
      };

      @appendable
      struct GetAvailableStates_Response_ {
                sequence<lifecycle_msgs::msg::dds_::State_,100> available_states;
      };

      @appendable
      struct GetAvailableTransitions_Request_ {
                string<255> node_name;
      };

      @appendable
      struct GetAvailableTransitions_Response_ {
                sequence<lifecycle_msgs::msg::dds_::TransitionDescription_,100> available_transitions;
      };

      @appendable
      struct GetState_Request_ {
                string<255> node_name;
      };

      @appendable
      struct GetState_Response_ {
                lifecycle_msgs::msg::dds_::State_ current_state;
      };

    };
  };
};
module stereo_msgs {
  module msg {
    module dds_ {
      @appendable
      struct DisparityImage_ {
                std_msgs::msg::dds_::Header_ header;
                sensor_msgs::msg::dds_::Image_ image;
                float f;
                float t;
                sensor_msgs::msg::dds_::RegionOfInterest_ valid_window;
                float min_disparity;
                float max_disparity;
                float delta_d;
      };

    };
  };
};
module tf2_msgs {
  module msg {
    module dds_ {
      const octet TF2Error__NO_ERROR = 0;
      const octet TF2Error__LOOKUP_ERROR = 1;
      const octet TF2Error__CONNECTIVITY_ERROR = 2;
      const octet TF2Error__EXTRAPOLATION_ERROR = 3;
      const octet TF2Error__INVALID_ARGUMENT_ERROR = 4;
      const octet TF2Error__TIMEOUT_ERROR = 5;
      const octet TF2Error__TRANSFORM_ERROR = 6;
      @appendable
      struct TF2Error_ {
                octet error;
                string<255> error_string;
      };

      @appendable
      struct TFMessage_ {
                sequence<geometry_msgs::msg::dds_::TransformStamped_,100> transforms;
      };

    };
  };
  module srv {
    module dds_ {
      @appendable
      struct FrameGraph_Request_ {
                boolean dummy;
      };

      @appendable
      struct FrameGraph_Response_ {
                string<255> frame_yaml;
      };

    };
  };
};
module nav_msgs {
  module msg {
    module dds_ {
      @appendable
      struct GridCells_ {
                std_msgs::msg::dds_::Header_ header;
                float cell_width;
                float cell_height;
                sequence<geometry_msgs::msg::dds_::Point_,100> cells;
      };

      @appendable
      struct MapMetaData_ {
                std_msgs::msg::dds_::Time_ map_load_time;
                float resolution;
                uint32 width;
                uint32 height;
                geometry_msgs::msg::dds_::Pose_ origin;
      };

      @appendable
      struct Odometry_ {
                std_msgs::msg::dds_::Header_ header;
                string<255> child_frame_id;
                geometry_msgs::msg::dds_::PoseWithCovariance_ pose;
                geometry_msgs::msg::dds_::TwistWithCovariance_ twist;
      };

      @appendable
      struct OccupancyGrid_ {
                std_msgs::msg::dds_::Header_ header;
                nav_msgs::msg::dds_::MapMetaData_ info;
                sequence<octet,100> data;
      };

      @appendable
      struct Path_ {
                std_msgs::msg::dds_::Header_ header;
                sequence<geometry_msgs::msg::dds_::PoseStamped_,100> poses;
      };

    };
  };
  module srv {
    module dds_ {
      @appendable
      struct GetMap_Request_ {
                boolean dummy;
      };

      @appendable
      struct GetMap_Response_ {
                nav_msgs::msg::dds_::OccupancyGrid_ map;
      };

      @appendable
      struct GetPlan_Request_ {
                geometry_msgs::msg::dds_::PoseStamped_ start;
                geometry_msgs::msg::dds_::PoseStamped_ goal;
                float tolerance;
      };

      @appendable
      struct GetPlan_Response_ {
                nav_msgs::msg::dds_::Path_ plan;
      };

      @appendable
      struct SetMap_Request_ {
                nav_msgs::msg::dds_::OccupancyGrid_ map;
                geometry_msgs::msg::dds_::PoseWithCovarianceStamped_ initial_pose;
      };

      @appendable
      struct SetMap_Response_ {
                boolean success;
      };

    };
  };
};
module visualization_msgs {
  module msg {
    module dds_ {
      const octet Marker__ARROW = 0;
      const octet Marker__CUBE = 1;
      const octet Marker__SPHERE = 2;
      const octet Marker__CYLINDER = 3;
      const octet Marker__LINE_STRIP = 4;
      const octet Marker__LINE_LIST = 5;
      const octet Marker__CUBE_LIST = 6;
      const octet Marker__SPHERE_LIST = 7;
      const octet Marker__POINTS = 8;
      const octet Marker__TEXT_VIEW_FACING = 9;
      const octet Marker__MESH_RESOURCE = 10;
      const octet Marker__TRIANGLE_LIST = 11;
      const octet Marker__ADD = 0;
      const octet Marker__MODIFY = 0;
      const octet Marker__DELETE = 2;
      const octet Marker__DELETEALL = 3;
      @appendable
      struct Marker_ {
                std_msgs::msg::dds_::Header_ header;
                string<255> ns;
                int32 id;
                int32 type;
                int32 action;
                geometry_msgs::msg::dds_::Pose_ pose;
                geometry_msgs::msg::dds_::Vector3_ scale;
                std_msgs::msg::dds_::ColorRGBA_ color;
                std_msgs::msg::dds_::Duration_ lifetime;
                boolean frame_locked;
                sequence<geometry_msgs::msg::dds_::Point_,100> points;
                sequence<std_msgs::msg::dds_::ColorRGBA_,100> colors;
                string<255> text;
                string<255> mesh_resource;
                boolean mesh_use_embedded_materials;
      };

      @appendable
      struct MarkerArray_ {
                sequence<visualization_msgs::msg::dds_::Marker_,100> markers;
      };

      const octet MenuEntry__FEEDBACK = 0;
      const octet MenuEntry__ROSRUN = 1;
      const octet MenuEntry__ROSLAUNCH = 2;
      @appendable
      struct MenuEntry_ {
                uint32 id;
                uint32 parent_id;
                string<255> title;
                string<255> command;
                octet command_type;
      };

      const octet ImageMarker__CIRCLE = 0;
      const octet ImageMarker__LINE_STRIP = 1;
      const octet ImageMarker__LINE_LIST = 2;
      const octet ImageMarker__POLYGON = 3;
      const octet ImageMarker__POINTS = 4;
      const octet ImageMarker__ADD = 0;
      const octet ImageMarker__REMOVE = 1;
      @appendable
      struct ImageMarker_ {
                std_msgs::msg::dds_::Header_ header;
                string<255> ns;
                int32 id;
                int32 type;
                int32 action;
                geometry_msgs::msg::dds_::Point_ position;
                float scale;
                std_msgs::msg::dds_::ColorRGBA_ outline_color;
                octet filled;
                std_msgs::msg::dds_::ColorRGBA_ fill_color;
                std_msgs::msg::dds_::Duration_ lifetime;
                sequence<geometry_msgs::msg::dds_::Point_,100> points;
                sequence<std_msgs::msg::dds_::ColorRGBA_,100> outline_colors;
      };

      const octet InteractiveMarkerControl__INHERIT = 0;
      const octet InteractiveMarkerControl__FIXED = 1;
      const octet InteractiveMarkerControl__VIEW_FACING = 2;
      const octet InteractiveMarkerControl__NONE = 0;
      const octet InteractiveMarkerControl__MENU = 1;
      const octet InteractiveMarkerControl__BUTTON = 2;
      const octet InteractiveMarkerControl__MOVE_AXIS = 3;
      const octet InteractiveMarkerControl__MOVE_PLANE = 4;
      const octet InteractiveMarkerControl__ROTATE_AXIS = 5;
      const octet InteractiveMarkerControl__MOVE_ROTATE = 6;
      const octet InteractiveMarkerControl__MOVE_3D = 7;
      const octet InteractiveMarkerControl__ROTATE_3D = 8;
      const octet InteractiveMarkerControl__MOVE_ROTATE_3D = 9;
      @appendable
      struct InteractiveMarkerControl_ {
                string<255> name;
                geometry_msgs::msg::dds_::Quaternion_ orientation;
                octet orientation_mode;
                octet interaction_mode;
                boolean always_visible;
                sequence<visualization_msgs::msg::dds_::Marker_,100> markers;
                boolean independent_marker_orientation;
                string<255> description;
      };

      @appendable
      struct InteractiveMarker_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Pose_ pose;
                string<255> name;
                string<255> description;
                float scale;
                sequence<visualization_msgs::msg::dds_::MenuEntry_,100> menu_entries;
                sequence<visualization_msgs::msg::dds_::InteractiveMarkerControl_,100> controls;
      };

      const octet InteractiveMarkerFeedback__KEEP_ALIVE = 0;
      const octet InteractiveMarkerFeedback__POSE_UPDATE = 1;
      const octet InteractiveMarkerFeedback__MENU_SELECT = 2;
      const octet InteractiveMarkerFeedback__BUTTON_CLICK = 3;
      const octet InteractiveMarkerFeedback__MOUSE_DOWN = 4;
      const octet InteractiveMarkerFeedback__MOUSE_UP = 5;
      @appendable
      struct InteractiveMarkerFeedback_ {
                std_msgs::msg::dds_::Header_ header;
                string<255> client_id;
                string<255> marker_name;
                string<255> control_name;
                octet event_type;
                geometry_msgs::msg::dds_::Pose_ pose;
                uint32 menu_entry_id;
                geometry_msgs::msg::dds_::Point_ mouse_point;
                boolean mouse_point_valid;
      };

      @appendable
      struct InteractiveMarkerInit_ {
                string<255> server_id;
                uint64 seq_num;
                sequence<visualization_msgs::msg::dds_::InteractiveMarker_,100> markers;
      };

      @appendable
      struct InteractiveMarkerPose_ {
                std_msgs::msg::dds_::Header_ header;
                geometry_msgs::msg::dds_::Pose_ pose;
                string<255> name;
      };

      const octet InteractiveMarkerUpdate__KEEP_ALIVE = 0;
      const octet InteractiveMarkerUpdate__UPDATE = 1;
      @appendable
      struct InteractiveMarkerUpdate_ {
                string<255> server_id;
                uint64 seq_num;
                octet type;
                sequence<visualization_msgs::msg::dds_::InteractiveMarker_,100> markers;
                sequence<visualization_msgs::msg::dds_::InteractiveMarkerPose_,100> poses;
                sequence<string<255>,100 > erases;
      };

    };
  };
};
module pendulum_msgs {
  module msg {
    module dds_ {
      @appendable
      struct JointCommand_ {
                double position;
      };

      @appendable
      struct JointState_ {
                double position;
                double velocity;
                double effort;
      };

      @appendable
      struct RttestResults_ {
                std_msgs::msg::dds_::Time_ stamp;
                pendulum_msgs::msg::dds_::JointCommand_ command;
                pendulum_msgs::msg::dds_::JointState_ state;
                uint64 cur_latency;
                double mean_latency;
                uint64 min_latency;
                uint64 max_latency;
                uint64 minor_pagefaults;
                uint64 major_pagefaults;
      };

    };
  };
};
module std_srvs {
  module srv {
    module dds_ {
      @appendable
      struct SetBool_Request_ {
                boolean data;
      };

      @appendable
      struct SetBool_Response_ {
                boolean success;
                string<255> message;
      };

      @appendable
      struct Trigger_Request_ {
                boolean dummy;
      };

      @appendable
      struct Trigger_Response_ {
                boolean success;
                string<255> message;
      };

    };
  };
};
module shape_msgs {
  module msg {
    module dds_ {
            typedef uint32 shape_msgs__MeshTriangle__unsigned_long_array_3[3];
      @appendable
      struct MeshTriangle_ {
                shape_msgs::msg::dds_::shape_msgs__MeshTriangle__unsigned_long_array_3 vertex_indices;
      };

      @appendable
      struct Mesh_ {
                sequence<shape_msgs::msg::dds_::MeshTriangle_,100> triangles;
                sequence<geometry_msgs::msg::dds_::Point_,100> vertices;
      };

            typedef double shape_msgs__Plane__double_array_4[4];
      @appendable
      struct Plane_ {
                shape_msgs::msg::dds_::shape_msgs__Plane__double_array_4 coef;
      };

      const octet SolidPrimitive__BOX = 1;
      const octet SolidPrimitive__SPHERE = 2;
      const octet SolidPrimitive__CYLINDER = 3;
      const octet SolidPrimitive__CONE = 4;
      const octet SolidPrimitive__BOX_X = 0;
      const octet SolidPrimitive__BOX_Y = 1;
      const octet SolidPrimitive__BOX_Z = 2;
      const octet SolidPrimitive__SPHERE_RADIUS = 0;
      const octet SolidPrimitive__CYLINDER_HEIGHT = 0;
      const octet SolidPrimitive__CYLINDER_RADIUS = 1;
      const octet SolidPrimitive__CONE_HEIGHT = 0;
      const octet SolidPrimitive__CONE_RADIUS = 1;
      @appendable
      struct SolidPrimitive_ {
                octet type;
                sequence<double,3> dimensions;
      };

    };
  };
};
